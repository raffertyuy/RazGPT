<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <rewrite-uri template="/openai/deployments/text-davinci-003/completions?api-version=2023-03-15-preview" copy-unmatched-params="true" />
        <set-header name="api-key" exists-action="override">
            <value>{{razopenai-key}}</value>
        </set-header>
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-body>@{
            // parse URL to ensure string format is valid
            var pageUrl = new Uri(context.Request.Url.Query.GetValueOrDefault("url"));
            var pageUrlString = pageUrl.ToString();

            var prompt = $"Respond in JSON format with keys title, description, keywords. Recommend SEO title, description and keywords for URL: \"{pageUrlString}\"";

            return new JObject
            {
                { "prompt", prompt },
                { "max_tokens", 2000 },
                { "n", 1 },
                { "temperature", 0.5 }
            }.ToString();
        }</set-body>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>
                <set-body>@{
                    var response = context.Response.Body.As<JObject>();
                    var choice = response["choices"][0];
                    var result = choice["text"].ToString().Trim();

                    return result;
                }</set-body>
            </when>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>