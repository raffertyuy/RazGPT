<!--
    One method to handle Azure OpenAI rate limits is to create multiple instances across multiple regions.
    This sample policy changes the backend service across 6 different openai endpoints if HTTP 429 is received.

    See here for how to configure multiple custom backends (with different api-keys) in Azure API Management: https://learn.microsoft.com/en-us/azure/api-management/backends
    This sample assumes that the model deployment IDs across the instances are the same.
    
    Sample HTTP 429 error message:
    Requests to the Completions_Create Operation under Azure OpenAI API version 2022-12-01 have exceeded call rate limit of your current OpenAI S0 pricing tier. Please retry after 55 seconds. Please go here: https://aka.ms/oai/quotaincrease if you would like to further increase the default rate limit.
-->
<policies>
    <inbound>
        <base />
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-query-parameter name="api-version" exists-action="skip">
            <value>2023-03-15-preview</value>
        </set-query-parameter>
        <cache-lookup-value key="backend-counter" variable-name="backend-counter" />
        <choose>
            <when condition="@(!context.Variables.ContainsKey("backend-counter"))">
                <set-variable name="backend-counter" value="0" />
                <cache-store-value key="backend-counter" value="0" duration="100" />
            </when>
        </choose>
        <choose>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 0)">
                <set-backend-service backend-id="razopenaieus" />
                <set-variable name="backend-counter" value="1" />
                <cache-store-value key="backend-counter" value="1" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 1)">
                <set-backend-service backend-id="razopenaieus2" />
                <set-variable name="backend-counter" value="2" />
                <cache-store-value key="backend-counter" value="2" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 2)">
                <set-backend-service backend-id="razopenaiscus" />
                <set-variable name="backend-counter" value="3" />
                <cache-store-value key="backend-counter" value="3" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 3)">
                <set-backend-service backend-id="razopenaiscus2" />
                <set-variable name="backend-counter" value="4" />
                <cache-store-value key="backend-counter" value="4" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 4)">
                <set-backend-service backend-id="razopenaiweu" />
                <set-variable name="backend-counter" value="5" />
                <cache-store-value key="backend-counter" value="5" duration="100" />
            </when>
            <otherwise>
                <set-backend-service backend-id="razopenaiweu2" />
                <set-variable name="backend-counter" value="0" />
                <cache-store-value key="backend-counter" value="0" duration="100" />
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <retry condition="@(context.Response.StatusCode >= 500 || context.Response.StatusCode >= 400)" count="12" interval="0" first-fast-retry="true">
            <choose>
                <when condition="@(context.Response.StatusCode >= 500 || context.Response.StatusCode >= 400)">
                    <choose>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 0)">
                            <set-backend-service backend-id="razopenaieus" />
                            <set-variable name="backend-counter" value="1" />
                            <cache-store-value key="backend-counter" value="1" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 1)">
                            <set-backend-service backend-id="razopenaieus2" />
                            <set-variable name="backend-counter" value="2" />
                            <cache-store-value key="backend-counter" value="2" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 2)">
                            <set-backend-service backend-id="razopenaiscus" />
                            <set-variable name="backend-counter" value="3" />
                            <cache-store-value key="backend-counter" value="3" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 3)">
                            <set-backend-service backend-id="razopenaiscus2" />
                            <set-variable name="backend-counter" value="4" />
                            <cache-store-value key="backend-counter" value="4" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 6 == 4)">
                            <set-backend-service backend-id="razopenaiweu" />
                            <set-variable name="backend-counter" value="5" />
                            <cache-store-value key="backend-counter" value="5" duration="100" />
                        </when>
                        <otherwise>
                            <set-backend-service backend-id="razopenaiweu2" />
                            <set-variable name="backend-counter" value="0" />
                            <cache-store-value key="backend-counter" value="0" duration="100" />
                        </otherwise>
                    </choose>
                </when>
            </choose>
            <forward-request buffer-request-body="true" />
        </retry>
    </backend>
    <outbound>
        <base />
        <!-- Uncomment for debugging, this outputs the next backend-counter in the JSON response body. -->
        <!--
        <set-body>@{ 
            JObject body = context.Response.Body.As<JObject>(); 
            body.Add(new JProperty("backend-counter", ((string)context.Variables["backend-counter"])));
            return body.ToString(); 
        }</set-body>
        -->
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>