<!--
    One method to handle Azure OpenAI rate limits is to create multiple instances across multiple regions.
    
    This sample policy load balances API requests across 6 different openai endpoints, round-robin.
    It also fails over to the next service if an HTTP 4xx or 5xx is received.

    See here for how to configure multiple custom backends (with different api-keys) in Azure API Management: https://learn.microsoft.com/en-us/azure/api-management/backends
    This sample assumes that the model deployment IDs across the instances are the same.
-->
<policies>
    <inbound>
        <base />
        <!-- default values if wasn't specified by the caller -->
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        <set-query-parameter name="api-version" exists-action="skip">
            <value>2023-05-15</value>
        </set-query-parameter>

        <!-- use APIM managed identity to authenticate with OpenAI
             - managed identity should have "Cognitive Services OpenAI Contributor" role
             - if not using managed identity, set the api-key in the APIM backend configuration
        -->
        <authentication-managed-identity resource="https://cognitiveservices.azure.com/" />

        <!-- round robin load balancing of multiple OpenAI BE endpoints -->
        <cache-lookup-value key="backend-counter" variable-name="backend-counter" />
        <choose>
            <when condition="@(!context.Variables.ContainsKey("backend-counter"))">
                <set-variable name="backend-counter" value="1" />
                <cache-store-value key="backend-counter" value="1" duration="100" />
            </when>
        </choose>
        <choose>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 1)">
                <set-backend-service backend-id="raz-aoai-eus" />
                <set-variable name="backend-counter" value="2" />
                <cache-store-value key="backend-counter" value="2" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 2)">
                <set-backend-service backend-id="raz-aoai-scus" />
                <set-variable name="backend-counter" value="3" />
                <cache-store-value key="backend-counter" value="3" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 3)">
                <set-backend-service backend-id="raz-aoai-weu" />
                <set-variable name="backend-counter" value="4" />
                <cache-store-value key="backend-counter" value="4" duration="100" />
            </when>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 4)">
                <set-backend-service backend-id="raz-aoai-fc" />
                <set-variable name="backend-counter" value="5" />
                <cache-store-value key="backend-counter" value="5" duration="100" />
            </when>
            <otherwise>
                <set-backend-service backend-id="raz-aoai-uks" />
                <set-variable name="backend-counter" value="1" />
                <cache-store-value key="backend-counter" value="1" duration="100" />
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <!-- if HTTP 4xx or 5xx occurs, failover to the next OpenAI BE endpoint -->
        <retry condition="@(context.Response.StatusCode >= 500 || context.Response.StatusCode >= 400)" count="10" interval="0" first-fast-retry="true">
            <choose>
                <when condition="@(context.Response.StatusCode >= 500 || context.Response.StatusCode >= 400)">
                    <choose>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 1)">
                            <set-backend-service backend-id="raz-aoai-eus" />
                            <set-variable name="backend-counter" value="1" />
                            <cache-store-value key="backend-counter" value="1" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 2)">
                            <set-backend-service backend-id="raz-aoai-scus" />
                            <set-variable name="backend-counter" value="2" />
                            <cache-store-value key="backend-counter" value="2" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 3)">
                            <set-backend-service backend-id="raz-aoai-weu" />
                            <set-variable name="backend-counter" value="3" />
                            <cache-store-value key="backend-counter" value="3" duration="100" />
                        </when>
                        <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 5 == 4)">
                            <set-backend-service backend-id="raz-aoai-fc" />
                            <set-variable name="backend-counter" value="4" />
                            <cache-store-value key="backend-counter" value="4" duration="100" />
                        </when>
                        <otherwise>
                            <set-backend-service backend-id="raz-aoai-uks" />
                            <set-variable name="backend-counter" value="1" />
                            <cache-store-value key="backend-counter" value="1" duration="100" />
                        </otherwise>
                    </choose>
                </when>
            </choose>
            <forward-request buffer-request-body="true" />
        </retry>
    </backend>
    <outbound>
        <base />
        <!-- Uncomment for debugging, this outputs the next backend-counter in the JSON response body. -->
        <!--
        <set-body>@{ 
            JObject body = context.Response.Body.As<JObject>(); 
            body.Add(new JProperty("backend-counter", ((string)context.Variables["backend-counter"])));
            return body.ToString(); 
        }</set-body>
        -->

        <!-- Draft code, not working
        <emit-metric name=“Subscription ID” value=“@ (context.Subscription.Id)”>
            <dimension name=“API Name” value=“@ (context.Api.Name)” />
            <dimension name=“Response Time” value=“@ (context.Response.Time)” />
            <dimension name=“Total Tokens” value=“@ (context.Response.Body.As<JObject> (preserveContent: true) [“total_tokens”].ToString ())” namespace=“my-metrics” />
        </emit-metric>
        -->
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>